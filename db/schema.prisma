// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens         Token[]
  sessions       Session[]
  bookRecords    BookRecords[]
  ReadingSession ReadingSession[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Book {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  description    String?
  name           String
  coverlink      String?
  author         String
  pageNum        Int
  isbn           String
  rate           Float            @default(5)
  bookRecords    BookRecords[]
  ReadingSession ReadingSession[]
}

model BookRecords {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  book   Book @relation(fields: [bookId], references: [id])
  bookId Int

  rating Int?

  isRead  Boolean @default(false)
  isLiked Boolean @default(false)

  @@unique([bookId, userId])
}

model ReadingSession {
  id        Int       @id @default(autoincrement())
  startTime DateTime
  startPage Int
  endTime   DateTime?
  endPage   Int?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  book   Book @relation(fields: [bookId], references: [id])
  bookId Int
}
